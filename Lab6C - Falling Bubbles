import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class FallingBubbles {
	private int[][] bubbleGrid;
	private WeightedQuickUnionUF p;
	private int size;
	private int[][] darts;
	private int[] popBubbles;
	private int row;
	private int col;
	public FallingBubbles(int[][] grid) {
		bubbleGrid = grid;
		row = grid.length;
		col = grid[0].length;
		size = row * col;
		p = new WeightedQuickUnionUF(size + 1);
		for(int i = 1; i <= row; i++) {
			for(int j = 1; j <= col; j++) {
				//System.out.println(i + " " + j);
				connect(i, j);
			}
		}
	}
	private void connect(int i, int j) {
		int location = dimensionReduction(i, j);
		if(i <= 0 || i > row || j <= 0 || j > col) {
			throw new IllegalArgumentException("row and col is out of bounds!");
		}
		if(bubbleGrid[i - 1][j - 1] != 1) {
			return;
		}
		if(i == 1 && bubbleGrid[i - 1][j - 1] == 1) {
			//System.out.print("first ");
			p.union(location, size);
			//System.out.print("terminated ");
		}
		//up
		if(i != 1 && bubbleGrid[i - 2][j - 1] == 1) {
			//System.out.print("second ");
			p.union(location, location - col);
			//System.out.print("terminated ");
		}
		//down
		if(i != row && bubbleGrid[i][j - 1] == 1) {
			//System.out.print("third ");
			p.union(location, location + col);
			//System.out.print("terminated ");
		}
		//left
		if(j != 1 && bubbleGrid[i - 1][j - 2] == 1) {
			//System.out.print("fourth ");
			p.union(location, location - 1);
			//System.out.print("terminated ");
		}
		//right
		if(j != col && bubbleGrid[i - 1][j] == 1) {
			//System.out.print("fifth ");
			p.union(location, location + 1);
			//System.out.print("terminated ");
		}
	}
	public int[] popBubbles(int[][] darts) {
		this.darts = darts;
		popBubbles = new int[this.darts.length];
		for(int i = 0; i < this.darts.length; i++) {
			popBubbles[i] = 0;
			bubbleGrid[this.darts[i][0]][this.darts[i][1]] = 0;
			p = new WeightedQuickUnionUF(size + 1);
			for(int j = 1; j <= row; j++) {  // re-instantiate
				for(int k = 1; k <= col; k++) {
					connect(j, k);
				}
			}
			for(int j = 1; j <= row; j++) {
				for(int k = 1; k <= col; k++) {
					int temp = dimensionReduction(j, k);
					if(!p.connected(temp, size) && bubbleGrid[j - 1][k - 1] == 1) {
						popBubbles[i] += 1;
					}
				}
			}
		}
		return popBubbles;
	}
	public void printPopBubbles() {
		System.out.println();
		for(int i = 0; i < popBubbles.length; i++) {
			System.out.print(popBubbles[i] + " ");
		}
	}
	private int dimensionReduction(int i, int j) {
		return (i - 1) * col + j - 1;
	}
	public static void main(String[] args) {
		int[][] grid = new int[][] {{1, 1, 0}, {1, 0, 0}, {1, 1, 0}, {1, 1, 1}, {1, 1, 1}};
		FallingBubbles f = new FallingBubbles(grid);
		int[][] darts = new int[][] {{2, 2}, {2, 0}};
		f.popBubbles(darts);
		f.printPopBubbles();
	}
}
